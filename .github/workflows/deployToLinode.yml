name: Deploy Discord Message Listener to Linode

on:
  push:
    branches:
      - main  # Solo deploy desde main
    paths-ignore:
      - 'README_SIMPLE_LISTENER.md'
      - 'docs/**'
      - '*.md'
  workflow_dispatch:  # Permite deployment manual
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Python # Keep this if you have local tests on the runner
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'

    - name: Install dependencies (on runner, for potential tests) # Keep this if you have local tests on the runner
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Configure SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan ${{ secrets.LINODE_HOST }} >> ~/.ssh/known_hosts
        chmod 644 ~/.ssh/known_hosts

    - name: Deploy to Linode and Restart Message Listener
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.LINODE_USERNAME }}@${{ secrets.LINODE_HOST }} << 'EOF'
          set -e # Exit on any error within this SSH block

          echo "🚀 Starting deployment..."

          # Navigate to project directory
          cd /opt/discord-message-listener || { echo "❌ Failed to navigate to project directory"; exit 1; }

          # Stop the message listener service before updating
          echo "⏹️ Stopping Discord message listener service..."
          /usr/bin/sudo -n /usr/bin/systemctl stop discord-message-listener || echo "⚠️ Service was not running or failed to stop, continuing."

          # Fix ownership issues (should be handled by prepare-server.sh, but good as a safeguard)
          echo "🔧 Fixing file ownership (as safeguard)..."
          /usr/bin/sudo -n /usr/bin/chown -R deployuser:deployuser /opt/discord-message-listener || echo "⚠️ Could not set ownership (might not be necessary)."

          # Handle git repository setup
          echo "📥 Setting up repository..."
          if [ ! -d ".git" ]; then
            echo "🔄 No git repository found, cloning..."
            # Remove any existing files first (ensure it's safe)
            rm -rf /opt/discord-message-listener/* /opt/discord-message-listener/.[^.]* 2>/dev/null || true
            git clone https://github.com/${{ github.repository }}.git . || { echo "❌ Failed to clone repository"; exit 1; }
            git config --global --add safe.directory /opt/discord-message-listener
          else
            echo "📦 Updating existing repository..."
            # Ensure correct ownership before git operations (again, a safeguard)
            git config --global --add safe.directory /opt/discord-message-listener
            git clean -fdx  # Remove untracked files and directories
            git fetch origin main || { echo "❌ Failed to fetch latest changes"; exit 1; }
            git reset --hard origin/main || { echo "❌ Failed to reset to latest changes"; exit 1; }
          fi

          # Activate virtual environment
          echo "🐍 Activating virtual environment..."
          # Asegúrate de que el venv exista (prepare-server.sh lo crea)
          if [ ! -d "venv" ]; then
            echo "Creating virtual environment..."
            python3 -m venv venv || { echo "❌ Failed to create virtual environment"; exit 1; }
          fi
          source venv/bin/activate || { echo "❌ Failed to activate virtual environment"; exit 1; }

          # Update dependencies
          echo "📦 Installing/updating dependencies..."
          pip install --upgrade pip || { echo "❌ Failed to upgrade pip"; exit 1; }
          pip install -r requirements.txt || { echo "❌ Failed to install dependencies"; exit 1; }
          deactivate # No es necesario mantener el venv activo después de pip install

          # Create .env file with secrets
          echo "🔑 Creating .env file with secrets..."
          echo "DISCORD_TOKEN=${{ secrets.DISCORD_TOKEN }}" > .env
          echo "MONITORING_SERVER_ID=${{ secrets.MONITORING_SERVER_ID }}" >> .env
          echo "MONITORING_CHANNEL_IDS=${{ secrets.MONITORING_CHANNEL_IDS }}" >> .env
          echo "LOG_FILE=./logs/messages.txt" >> .env
          # Asegúrate de que .env no tiene permisos de lectura para todos
          chmod 600 .env

          # Start the message listener service
          echo "▶️ Starting Discord message listener service..."
          /usr/bin/sudo -n /usr/bin/systemctl start discord-message-listener || { echo "❌ Failed to start Discord message listener service"; exit 1; }

          # Check service status
          echo "🔍 Checking service status..."
          /usr/bin/sudo -n /usr/bin/systemctl is-active discord-message-listener --quiet && echo "✅ Discord message listener is running" || { echo "❌ Failed to start Discord message listener"; exit 1; }

          echo "🎉 Deployment completed successfully!"
        EOF